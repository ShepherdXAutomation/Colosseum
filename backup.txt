<script>
    // Initialize Phaser configuration
    var config = {
        type: Phaser.AUTO,
        width: 800,
        height: 600,
        parent: 'game-container',
        physics: {
            default: 'arcade',
            arcade: {
                gravity: { y: 0 },
                debug: false
            }
        },
        scene: {
            preload: preload,
            create: create,
            update: update
        }
    };

    var player;
    var enemy;
    var cursors;

    // Preload assets
    function preload() {
        this.load.json('animationsData', 'templates/js/anims.json')
        this.load.image('background', '/static/images/background.png'); // Background
        this.load.spritesheet('character', 'static/images/universal-lpc-sprite_male_01_walk-3frame.png', {
            frameWidth: 43, 
            frameHeight: 61,
            margin: 7,
            horizontal: 4
        });
        this.load.audio('backgroundMusic', 'static/necromancers_tower.ogg');
        this.load.audio('whipSound', 'static/whip.wav');
        this.load.atlas('strongfairy', '/static/images/sprites/strongfairy-1.png', '/static/images/sprites/strongfairy-1.json');


    }

    // Create the game scene
    function create() {
        // Add background
        const background = this.add.image(400, 300, 'background');
        const bottomLeft = getBottomLeftCorner(background);
        const bottomRight = getBottomRightCorner(background);
        // Play background music
        var music = this.sound.add('backgroundMusic', {
            loop: true
        });
        music.play();
        var whipSound = this.sound.add('whipSound');

      
        // Add player sprite and enable physics
        player = this.physics.add.sprite(400, bottomLeft.y, 'character');
        

        // Set bounce and collide with world bounds
        player.setBounce(0.2);
        player.setCollideWorldBounds(true);
        

        // Add the sprite and play the animation
        let enemy = this.add.sprite(400, 150, 'strongfairy');

       
        // Load Animations
        let animationData = this.cache.json.get('animationData');
            animationData.anims.forEach(anim => {
            this.anims.create(anim);
        });

        player.anims.play('villager-walk');
        enemy.anims.play('fairy-walk-down');
        

        this.tweens.add({
            targets: player,
            y: 450, // Move to middle of the screen
            ease: 'Linear', // Linear movement
            duration: 4000, // 3 seconds
            repeat: 0, // Do not repeat
            onComplete: function() {
                player.anims.play('idle') // Stop the walking animation when the character reaches the destination
            }
        });
        this.tweens.add({
            targets: enemy,
            y: 300,
            ease: 'linear',
            duration: 4000,
            repeat: 0,
            onComplete: function(){
                enemy.anims.play('fairy-dance');

                enemy.scene.time.delayedCall(1000,function(){

                    enemy.anims.play('fairy-whip');
                    
                    enemy.scene.time.delayedCall(1000, function(){

                        enemy.anims.play('fairy-idle');
                    });
                });
            }
        });
        // Enable keyboard input
        cursors = this.input.keyboard.createCursorKeys();
        
       
    }

    // Update loop for the game
    function update() {
        // Jump when pressing the space bar and on the ground
        if (cursors.space.isDown && player.body.touching.down) {
            player.setVelocityY(-330);
        }
    }

    // Start the Phaser game with the configuration
    var game = new Phaser.Game(config);


    // Function to get the bottom-left corner of the background image
function getBottomLeftCorner(background) {
    const x = background.x - background.displayWidth / 2;
    const y = background.y + background.displayHeight / 2;
    return { x, y };
}

// Function to get the x and y coordinates of the bottom-right corner of the background image
function getBottomRightCorner(background) {
    const x = background.x + background.displayWidth / 2;
    const y = background.y + background.displayHeight / 2;
    return { x, y };
}


</script>